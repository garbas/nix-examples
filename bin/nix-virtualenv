#!/usr/bin/env python

import click
import os
import sys
import subprocess


class NixVirtualenv(object):

    def __init__(self, d, path=os.getcwd()):
        self.config = {}
        self.verbose = False
        self.config['project_path'] = os.path.join(path, d)
        self.config['project_name'] = os.path.basename(self.config['project_path'])
        project_nix_path_hash = subprocess.check_output(
                                    ["echo" +
                                    self.config['project_path'] +
                                    " | md5sum | cut -f 1 -d \" \" " ], shell=True)
  
        self.config['project_nix_path'] = os.path.join(
                                              os.getenv('HOME'),
                                              '.nix-virtualenv',
                                              self.config['project_name']+'-'+project_nix_path_hash.strip())
        self.config['default_nix'] = os.path.join(self.config['project_nix_path'], 'default.nix')
        self.config['default_drv'] = os.path.join(self.config['project_nix_path'], 'default.drv')

    def set_config(self, key, value):
        self.config[key] = value
        if self.verbose:
            click.echo('  config[%s] = %s' % (key, value), file=sys.stderr)


@click.command()
@click.option('--dir', '-d')
@click.option('--python', '-p', default="2.7")
@click.option('--nix-package', '-np', multiple=True, default='')
def cli(python, nix_package, dir):
    """creating a virtualenv replacement with nix"""
    # initialize the config object
    nix_object = NixVirtualenv(d=dir)
    nix_object.set_config('python_version', python.replace(".", ""))
    nix_object.set_config('nix_packages', ' '.join(nix_package))
    default_nix = \
'''
{ pythonVersion ? "%(python_version)s" }:

  let
    pkgs = import <nixpkgs> {};
    pythonPackages = builtins.getAttr (
      if pythonVersion == "py"
    then "pypyPackages"
    else "python${pythonVersion}Packages"
      ) pkgs;
    libPrefix = if pythonVersion == "py"
      then "pypy-c/site-packages"
      else "lib/${python.libPrefix}/site-packages";
    binPrefix = if pythonVersion == "py"
      then "/pypy-c/bin"
      else "/bin";
    inherit (pythonPackages) python buildPythonPackage;
    custom_pip = pkgs.lib.overrideDerivation pythonPackages.pip (old: {
      prePatch = ''
  sed -i -e "/dest='root_path',/ { N; /\\n.*metavar='dir',/ { N; /\\n.*default=None/ { N; s@dest='root_path',\\n.*metavar='dir',\\n.*default=None@dest='root_path',\\n            metavar='dir',\\n            default=\\"%(project_nix_path)s\\"@ } } }" pip/commands/install.py
      '';
    });
    custom_buildout = pkgs.lib.overrideDerivation pythonPackages.zc_buildout221 (old: {
      postInstall = ''
  for script in \$out/bin/*; do
    wrapProgram \$script --set PYTHONPATH "\$PYTHONPATH"
  done
      '';
    });
    custom_setuptools = pkgs.lib.hiPrio (pkgs.lib.overrideDerivation pythonPackages.setuptools (old: {
      installPhase = old.installPhase + ''
      '';
    }));
  in pkgs.stdenv.mkDerivation {
    name = "nix-virtualenv-%(project_name)s";
    src = ./.;
    buildInputs = with pkgs; with pythonPackages; [%(nix_packages)s
      custom_setuptools
      custom_pip
      custom_buildout
    ];
    shellHook = ''
      PYTHONPREFIX="%(project_nix_path)s${python}"
      PYTHONLIBPREFIX="$PYTHONPREFIX/${libPrefix}"
      PYTHONPATH="$PYTHONLIBPREFIX:$PYTHONPATH"
      PATH="$PYTHONPREFIX${binPrefix}:$PATH"
      mkdir -p $PYTHONLIBPREFIX
      cd "%(project_nix_path)s"
    '';
  }
'''  % nix_object.config

    print(nix_object.config)
    print(default_nix)
    if not os.path.exists(nix_object.config['default_nix']):
      os.makedirs(nix_object.config['project_nix_path'])
      with open(nix_object.config['default_nix'], 'w') as default_nix_file:
        default_nix_file.write(default_nix)
      #import pdb; pdb.set_trace();
      subprocess.check_call(["nix-instantiate", nix_object.config['default_nix'], "--indirect", "--add-root", nix_object.config['default_drv']], cwd=nix_object.config['project_nix_path'], shell=True)
    
    subprocess.check_call(["nix-shell", nix_object.config['default_drv']], cwd=nix_object.config['project_nix_path'], shell=True)

if __name__ == '__main__':
    cli()

