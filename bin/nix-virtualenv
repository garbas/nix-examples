#!/usr/bin/env bash

USAGE="Usage: $0 <dir> --python 3.3 -p <nix-package1> -p <nix-package-2> ..."

if [ "$#" == "0" ]; then
  echo "$USAGE"
  echo "Error: you need to specify virtualenv directory."
  exit 1
fi

if [ ! -e $1 ]; then
  mkdir -p $1
fi

PROJECT_PATH=`pwd`/$1
PROJECT_NAME=`basename $PROJECT_PATH`
PROJECT_NIX_PATH=$HOME/.nix-virtualenv/$PROJECT_NAME-`echo $PROJECT_PATH| md5sum | cut -f 1 -d " "`
DEFAULT_NIX=$PROJECT_NIX_PATH/default.nix
PYTHON_VERSION="27"
PACKAGES=""
EXTRA=""

while [[ $# > 0 ]]; do
  key="$1"

  case $key in
    --python)
      case $2 in
        2.6)
          PYTHON_VERSION="26"
          shift
          ;;
        2.7)
          PYTHON_VERSION="27"
          shift
          ;;
        3.3)
          PYTHON_VERSION="33"
          shift
          ;;
        3.4)
          PYTHON_VERSION="34"
          shift
          ;;
        py)
          PYTHON_VERSION="py"
          shift
          ;;
      esac
      ;;
    -p)
      PACKAGES=$PACKAGES$'\n    '$2
      shift
      ;;
    *)
      EXTRA="$EXTRA $1"
      ;;
  esac

  shift
done

if [ -e $DEFAULT_NIX ]; then 
  rm $DEFAULT_NIX
fi

mkdir -p $PROJECT_NIX_PATH
cat <<EOF > $DEFAULT_NIX
{ pythonVersion ? "$PYTHON_VERSION" }:

let
  pkgs = import <nixpkgs> {};
  pythonPackages = builtins.getAttr (
    if pythonVersion == "py"
        then "pypyPackages"
        else "python\${pythonVersion}Packages"
    ) pkgs;
  libPrefix = if pythonVersion == "py"
    then "pypy-c/site-packages"
    else "lib/\${python.libPrefix}/site-packages";
  binPrefix = if pythonVersion == "py"
    then "/pypy-c/bin"
    else "/bin";
  inherit (pythonPackages) python buildPythonPackage;
  custom_pip = pkgs.lib.overrideDerivation pythonPackages.pip (old: {
    prePatch = ''
      sed -i -e "/dest='root_path',/ { N; /\n.*metavar='dir',/ { N; /\n.*default=None/ { N; s@dest='root_path',\n.*metavar='dir',\n.*default=None@dest='root_path',\n            metavar='dir',\n            default=\"$PROJECT_NIX_PATH\"@ } } }" pip/commands/install.py
    '';
  });
  custom_buildout = pkgs.lib.overrideDerivation pythonPackages.zc_buildout221 (old: {
    postInstall = ''
      for script in \$out/bin/*; do
        wrapProgram \$script --set PYTHONPATH "\$PYTHONPATH"
      done
    '';
  });
  custom_setuptools = pkgs.lib.hiPrio (pkgs.lib.overrideDerivation pythonPackages.setuptools (old: {
    installPhase = old.installPhase + ''
      sed -i"" -e "s@.easy_install-wrapped@.easy_install-wrapped --prefix $PROJECT_NIX_PATH/\${python}/@" \$out/bin/easy_install
    '';
  }));
in pkgs.stdenv.mkDerivation {
  name = "nix-virtualenv-$PROJECT_NAME";
  src = ./.;
  buildInputs = with pkgs; with pythonPackages; [$PACKAGES
    custom_setuptools
    custom_pip
    custom_buildout
  ];
  shellHook = ''
    PYTHONPREFIX="$PROJECT_NIX_PATH\${python}"
    PYTHONLIBPREFIX="\$PYTHONPREFIX/\${libPrefix}"
    PYTHONPATH="\$PYTHONLIBPREFIX:\$PYTHONPATH"
    PATH="\$PYTHONPREFIX\${binPrefix}:\$PATH"
    mkdir -p \$PYTHONLIBPREFIX
    cd $PROJECT_PATH
  '';
}
EOF


nix-shell $DEFAULT_NIX $EXTRA
