#!/usr/bin/env bash

if [ -e default.nix ]; then 
  read -p "\`default.nix\` file already exists! Do you want to overwrite it? (y/n) " choice
  case "$choice" in 
      y|Y ) rm default.nix;;
      n|N ) echo "Keeping default.nix";;
      * ) echo "invalid";;
  esac
fi

if [ ! -e default.nix ]; then

  cat <<EOF > default.nix
{ pythonVersion ? "27" }:

let
  pkgs = import <nixpkgs> {};
  pythonPackages = builtins.getAttr (
    if pythonVersion == "py"
        then "pypyPackages"
        else "python\${pythonVersion}Packages"
    ) pkgs;
  libPrefix = if pythonVersion == "py"
    then "pypy-c/site-packages"
    else "lib/\${python.libPrefix}/site-packages";
  binPrefix = if pythonVersion == "py"
    then "/pypy-c/bin"
    else "/bin";
  inherit (pythonPackages) python buildPythonPackage;
  custom_pip = pkgs.lib.overrideDerivation pythonPackages.pip (old: {
    prePatch = ''
      sed -i -e "/dest='root_path',/ { N; /\n.*metavar='dir',/ { N; /\n.*default=None/ { N; s@dest='root_path',\n.*metavar='dir',\n.*default=None@dest='root_path',\n            metavar='dir',\n            default=\"`pwd`\"@ } } }" pip/commands/install.py
    '';
  });
  custom_buildout = pkgs.lib.overrideDerivation pythonPackages.zc_buildout221 (old: {
    postInstall = ''
      for script in \$out/bin/*; do
        wrapProgram \$script --set PYTHONPATH "\$PYTHONPATH"
      done
    '';
  });
  custom_setuptools = pkgs.lib.hiPrio (pkgs.lib.overrideDerivation pythonPackages.setuptools (old: {
    installPhase = old.installPhase + ''
      sed -i"" -e "s@.easy_install-wrapped@.easy_install-wrapped --prefix `pwd`\${python}/@" \$out/bin/easy_install
    '';
  }));
in pkgs.stdenv.mkDerivation {
  name = "`basename \`pwd\``-nix-virtualenv";
  src = ./.;
  buildInputs = [  # <-- built time dependencies
    custom_setuptools
    custom_pip
    custom_buildout
  ];
  propagetedBuildInputs = [  # <-- run time dependencies
  ];
  shellHook = ''
    PATH="\`pwd\`\${python}\${binPrefix}:\$PATH"
    PYTHONPREFIX="\`pwd\`\${python}"
    PYTHONLIBPREFIX="\$PYTHONPREFIX/\${libPrefix}"
    PYTHONPATH="\$PYTHONLIBPREFIX:\$PYTHONPATH"
    mkdir -p \$PYTHONLIBPREFIX
  '';
}
EOF

fi

pythonVersion=`basename $0 | rev | cut -c -2 | rev`

nix-shell default.nix --argstr pythonVersion "$pythonVersion"
